// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { AbilityType } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("Card")));
bytes32 constant CardTableId = _tableId;

struct CardData {
  uint32 attack;
  uint32 health;
  uint32 cost;
  AbilityType ability_type;
  uint32 ability_value;
  address creator;
  bool exists;
}

library Card {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](7);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.UINT8;
    _schema[4] = SchemaType.UINT32;
    _schema[5] = SchemaType.ADDRESS;
    _schema[6] = SchemaType.BOOL;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](7);
    _fieldNames[0] = "attack";
    _fieldNames[1] = "health";
    _fieldNames[2] = "cost";
    _fieldNames[3] = "ability_type";
    _fieldNames[4] = "ability_value";
    _fieldNames[5] = "creator";
    _fieldNames[6] = "exists";
    return ("Card", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get attack */
  function getAttack(bytes32 key) internal view returns (uint32 attack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get attack (using the specified store) */
  function getAttack(IStore _store, bytes32 key) internal view returns (uint32 attack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set attack */
  function setAttack(bytes32 key, uint32 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((attack)));
  }

  /** Set attack (using the specified store) */
  function setAttack(IStore _store, bytes32 key, uint32 attack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((attack)));
  }

  /** Get health */
  function getHealth(bytes32 key) internal view returns (uint32 health) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get health (using the specified store) */
  function getHealth(IStore _store, bytes32 key) internal view returns (uint32 health) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set health */
  function setHealth(bytes32 key, uint32 health) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((health)));
  }

  /** Set health (using the specified store) */
  function setHealth(IStore _store, bytes32 key, uint32 health) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((health)));
  }

  /** Get cost */
  function getCost(bytes32 key) internal view returns (uint32 cost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get cost (using the specified store) */
  function getCost(IStore _store, bytes32 key) internal view returns (uint32 cost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set cost */
  function setCost(bytes32 key, uint32 cost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((cost)));
  }

  /** Set cost (using the specified store) */
  function setCost(IStore _store, bytes32 key, uint32 cost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((cost)));
  }

  /** Get ability_type */
  function getAbility_type(bytes32 key) internal view returns (AbilityType ability_type) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return AbilityType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get ability_type (using the specified store) */
  function getAbility_type(IStore _store, bytes32 key) internal view returns (AbilityType ability_type) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return AbilityType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set ability_type */
  function setAbility_type(bytes32 key, AbilityType ability_type) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(ability_type)));
  }

  /** Set ability_type (using the specified store) */
  function setAbility_type(IStore _store, bytes32 key, AbilityType ability_type) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked(uint8(ability_type)));
  }

  /** Get ability_value */
  function getAbility_value(bytes32 key) internal view returns (uint32 ability_value) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get ability_value (using the specified store) */
  function getAbility_value(IStore _store, bytes32 key) internal view returns (uint32 ability_value) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set ability_value */
  function setAbility_value(bytes32 key, uint32 ability_value) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((ability_value)));
  }

  /** Set ability_value (using the specified store) */
  function setAbility_value(IStore _store, bytes32 key, uint32 ability_value) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((ability_value)));
  }

  /** Get creator */
  function getCreator(bytes32 key) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Get creator (using the specified store) */
  function getCreator(IStore _store, bytes32 key) internal view returns (address creator) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (address(Bytes.slice20(_blob, 0)));
  }

  /** Set creator */
  function setCreator(bytes32 key, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((creator)));
  }

  /** Set creator (using the specified store) */
  function setCreator(IStore _store, bytes32 key, address creator) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((creator)));
  }

  /** Get exists */
  function getExists(bytes32 key) internal view returns (bool exists) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 6);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get exists (using the specified store) */
  function getExists(IStore _store, bytes32 key) internal view returns (bool exists) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 6);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set exists */
  function setExists(bytes32 key, bool exists) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 6, abi.encodePacked((exists)));
  }

  /** Set exists (using the specified store) */
  function setExists(IStore _store, bytes32 key, bool exists) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 6, abi.encodePacked((exists)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (CardData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (CardData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 key,
    uint32 attack,
    uint32 health,
    uint32 cost,
    AbilityType ability_type,
    uint32 ability_value,
    address creator,
    bool exists
  ) internal {
    bytes memory _data = encode(attack, health, cost, ability_type, ability_value, creator, exists);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    uint32 attack,
    uint32 health,
    uint32 cost,
    AbilityType ability_type,
    uint32 ability_value,
    address creator,
    bool exists
  ) internal {
    bytes memory _data = encode(attack, health, cost, ability_type, ability_value, creator, exists);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, CardData memory _table) internal {
    set(
      key,
      _table.attack,
      _table.health,
      _table.cost,
      _table.ability_type,
      _table.ability_value,
      _table.creator,
      _table.exists
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, CardData memory _table) internal {
    set(
      _store,
      key,
      _table.attack,
      _table.health,
      _table.cost,
      _table.ability_type,
      _table.ability_value,
      _table.creator,
      _table.exists
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (CardData memory _table) {
    _table.attack = (uint32(Bytes.slice4(_blob, 0)));

    _table.health = (uint32(Bytes.slice4(_blob, 4)));

    _table.cost = (uint32(Bytes.slice4(_blob, 8)));

    _table.ability_type = AbilityType(uint8(Bytes.slice1(_blob, 12)));

    _table.ability_value = (uint32(Bytes.slice4(_blob, 13)));

    _table.creator = (address(Bytes.slice20(_blob, 17)));

    _table.exists = (_toBool(uint8(Bytes.slice1(_blob, 37))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint32 attack,
    uint32 health,
    uint32 cost,
    AbilityType ability_type,
    uint32 ability_value,
    address creator,
    bool exists
  ) internal view returns (bytes memory) {
    return abi.encodePacked(attack, health, cost, ability_type, ability_value, creator, exists);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
